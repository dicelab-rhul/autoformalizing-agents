{
  "name": "Jaxiqu",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous player/2.\n:- discontiguous role/2.\n:- discontiguous control/2.\n:- discontiguous default_move/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous payoff/4.\n:- discontiguous final/1.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for the Political Parties Coalition Game */\n\n% Payoff matrix for the coalition game\npayoff('C', 'C', 6, 6).\npayoff('C', 'N', 0, 3).\npayoff('N', 'C', 3, 0).\npayoff('N', 'N', 2, 2).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(p1), s0).\ninitially(player(p2), s0).\ninitially(role(p1, party1), s0).\ninitially(role(p2, party2), s0).\ninitially(control(p1), s0).\ninitially(control(p2), s0).\ninitially(default_move(_, 'C'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the party has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a party to choose\npossible(move(P,'C'), S):- holds(player(P), S).\npossible(move(P,'N'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('C', 'N').\nopposite_move('N', 'C').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the party loses control, i.e.,\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with parties, moves, and utilities.\nfinally(outcome(P1,M1,U1,P2,M2,U2), S):-\n    final(S),\n    holds(role(P1, party1), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, party2), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the parties.\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1,_,U1,_,_,_), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_,_,_,P2,_,U2), S).\n",
  "game_moves": [
    "C",
    "N"
  ],
  "game_players": [
    "p1",
    "p2"
  ],
  "status": "correct",
  "moves": [
    "C",
    "C",
    "N",
    "N"
  ],
  "payoffs": [
    6.0,
    0.0,
    2.0,
    3.0
  ],
  "total_payoff": 11.0,
  "default_move": "C",
  "trace_messages": [],
  "attempts": 1
}