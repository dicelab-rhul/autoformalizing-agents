{
  "name": "Cicuba",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": " \n\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for Political Parties Coalition game\npayoff('Commit', 'Commit', 6, 6).\npayoff('Commit', 'Independent', 0, 3).\npayoff('Independent', 'Commit', 3, 0).\npayoff('Independent', 'Independent', 2, 2).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(party1), s0).\ninitially(player(party2), s0).\ninitially(role(party1, leader), s0).\ninitially(role(party2, partner), s0).\ninitially(control(party1), s0).\ninitially(control(party2), s0).\ninitially(default_move(_, 'Independent'), s0).\n\n% When a state is final\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'Commit'), S):- holds(player(P), S).\npossible(move(P, 'Independent'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('Commit', 'Independent').\nopposite_move('Independent', 'Commit').\n\n% The effects of a move: if P has chosen M, then in the next state this is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e. cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S):-\n    final(S),\n    holds(role(P1, leader), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, partner), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_, _, _, P2, _, U2), S).\n\n",
  "game_moves": [
    "Independent",
    "Commit"
  ],
  "game_players": [
    "party1",
    "party2"
  ],
  "status": "correct",
  "moves": [
    "Independent",
    "Independent",
    "Commit",
    "Commit"
  ],
  "payoffs": [
    2.0,
    3.0,
    6.0,
    0.0
  ],
  "total_payoff": 11.0,
  "default_move": "Independent",
  "trace_messages": [],
  "attempts": 1
}