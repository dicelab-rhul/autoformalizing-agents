{
  "name": "Totago",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous payoff/4.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for Negotiation Game\npayoff('H', 'H', -10, -10).\npayoff('C', 'H', -1, 1).\npayoff('H', 'C', 1, -1).\npayoff('C', 'C', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(husband), s0).\ninitially(player(wife), s0).\ninitially(role(husband, row), s0).\ninitially(role(wife, col), s0).\ninitially(control(husband), s0).\ninitially(control(wife), s0).\ninitially(default_move(_, 'C'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_WifeMove, _), do(move(_HusbandMove, _), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'H'), S) :- holds(player(P), S).\npossible(move(P, 'C'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('C', 'H').\nopposite_move('H', 'C').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(Husband, HusbandMove, HusbandUtility, Wife, WifeMove, WifeUtility), S) :-\n    final(S),\n    holds(role(Husband, row), S),\n    holds(did(Husband, HusbandMove), S),\n    holds(role(Wife, col), S),\n    holds(did(Wife, WifeMove), S),\n    payoff(HusbandMove, WifeMove, HusbandUtility, WifeUtility).\n\n% Goals achieved by the players.\nfinally(goal(Husband, HusbandUtility), S) :-\n    finally(outcome(Husband, _, HusbandUtility, _, _, _), S).\nfinally(goal(Wife, WifeUtility), S) :-\n    finally(outcome(_, _, _, Wife, _, WifeUtility), S).\n",
  "game_moves": [
    "C",
    "H"
  ],
  "game_players": [
    "husband",
    "wife"
  ],
  "status": "correct",
  "moves": [
    "C",
    "C",
    "H",
    "H"
  ],
  "payoffs": [
    0.0,
    -1.0,
    -10.0,
    1.0
  ],
  "total_payoff": -10.0,
  "default_move": "C",
  "trace_messages": [],
  "attempts": 1
}