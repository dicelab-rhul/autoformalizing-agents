{
  "name": "Jupoya",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n% Discontiguous declaration for compatibility\n:- discontiguous player/1.\n:- discontiguous role/2.\n:- discontiguous control/2.\n:- discontiguous default_move/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous payoff/4.\n\n% Payoff matrix for the negotiation game\npayoff('firm', 'firm', -10, -10).\npayoff('compromise', 'firm', -1, 1).\npayoff('firm', 'compromise', 1, -1).\npayoff('compromise', 'compromise', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% Initial conditions in the beginning state\ninitially(player(husband), s0).\ninitially(player(wife), s0).\ninitially(role(husband, row), s0).\ninitially(role(wife, col), s0).\ninitially(control(husband), s0).\ninitially(control(wife), s0).\ninitially(default_move(_, 'compromise'), s0).\n\n% Final state when both players have moved\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))) :- initial(S).\n\n% Legal move, ensuring a player can only move if they have control\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% Possible moves for players\npossible(move(P,'firm'), S) :- holds(player(P), S).\npossible(move(P,'compromise'), S) :- holds(player(P), S).\n\n% Moves that are considered opposite\nopposite_move('compromise', 'firm').\nopposite_move('firm', 'compromise').\n\n% Effects of a move: recording the chosen move\neffect(did(P, M), move(P, M), _S).\n\n% Effect of a move causing the player to lose control\nabnormal(control(P), move(P, _M), _S).\n\n% Outcomes of the game with players, moves, and utilities\nfinally(outcome(P1, M1, U1, P2, M2, U2), S) :-\n    final(S),\n    holds(role(P1, row), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, col), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by each player\nfinally(goal(P1, U1), S) :-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S) :-\n    finally(outcome(_, _, _, P2, _, U2), S).\n",
  "game_moves": [
    "compromise",
    "firm"
  ],
  "game_players": [
    "husband",
    "wife"
  ],
  "status": "correct",
  "moves": [
    "compromise",
    "compromise",
    "firm",
    "firm"
  ],
  "payoffs": [
    0.0,
    -1.0,
    -10.0,
    1.0
  ],
  "total_payoff": -10.0,
  "default_move": "compromise",
  "trace_messages": [],
  "attempts": 1
}