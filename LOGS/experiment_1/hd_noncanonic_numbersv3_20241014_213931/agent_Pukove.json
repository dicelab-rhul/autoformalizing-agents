{
  "name": "Pukove",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for the Profit Sharing Game */\n\n/* Payoff matrix for the Profit Sharing Game */\npayoff('demand', 'demand', -25, -25).\npayoff('agree', 'demand', -2, 2).\npayoff('demand', 'agree', 2, -2).\npayoff('agree', 'agree', 0, 0).\n\n/* Initial state */\ninitial(s0).\n\n/* What holds initially: who is a player, their role, and whether they can play. */\ninitially(player(bp1), s0).\ninitially(player(bp2), s0).\ninitially(role(bp1, row), s0).\ninitially(role(bp2, col), s0).\ninitially(control(bp1), s0).\ninitially(control(bp2), s0).\ninitially(default_move(_, 'agree'), s0).\n\n/* When a state is final: no need to check content as it is generated by game/2, \n   implying it is a legal state. */\nfinal(do(move(_BP2, _M2), do(move(_BP1, _M1), S))) :- initial(S).\n\n/* A legal move is a possible move where the player has control (is its turn). */\nlegal(move(BP, M), S) :- possible(move(BP, M), S), holds(control(BP), S).\n\n/* What is possible for a player to choose */\npossible(move(BP, 'demand'), S) :- holds(player(BP), S).\npossible(move(BP, 'agree'), S) :- holds(player(BP), S).\n\n/* Moves that are opposite to each other. */\nopposite_move('agree', 'demand').\nopposite_move('demand', 'agree').\n\n/* The effects of a move: if a BP has chosen M, then in the next state this \n   is what they did. */\neffect(did(BP, M), move(BP, M), _S).\n\n/* The effects of a move: once a move is made, the player loses control, i.e., \n   cannot move anymore. */\nabnormal(control(BP), move(BP, _M), _S).\n\n/* What holds finally: the outcome with players, Moves, and Utilities. */\nfinally(outcome(BP1, M1, U1, BP2, M2, U2), S) :- \n    final(S), \n    holds(role(BP1, row), S),\n    holds(did(BP1, M1), S),\n    holds(role(BP2, col), S),\n    holds(did(BP2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n/* Goals achieved by the players. */\nfinally(goal(BP1, U1), S) :- \n    finally(outcome(BP1, _, U1, _, _, _), S).\nfinally(goal(BP2, U2), S) :- \n    finally(outcome(_, _, _, BP2, _, U2), S).\n\n",
  "game_moves": [
    "agree",
    "demand"
  ],
  "game_players": [
    "bp1",
    "bp2"
  ],
  "status": "correct",
  "moves": [
    "agree",
    "agree",
    "demand",
    "demand"
  ],
  "payoffs": [
    0.0,
    -2.0,
    -25.0,
    2.0
  ],
  "total_payoff": -25.0,
  "default_move": "agree",
  "trace_messages": [],
  "attempts": 1
}