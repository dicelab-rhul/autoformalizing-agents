{
  "name": "Kicime",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous payoff/4.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the Friends' Game\npayoff('basketball', 'basketball', 2, 1).\npayoff('soccer', 'soccer', 1, 2).\npayoff('basketball', 'soccer', 0, 0).\npayoff('soccer', 'basketball', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(f1), s0).\ninitially(player(f2), s0).\ninitially(role(f1, basketball_enthusiast), s0).\ninitially(role(f2, soccer_fan), s0).\ninitially(control(f1), s0).\ninitially(control(f2), s0).\ninitially(default_move(_, 'basketball'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_F2, _M2), do(move(_F1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (it's their turn).\nlegal(move(F, M), S) :- possible(move(F, M), S), holds(control(F), S).\n\n% What is possible for a player to choose\npossible(move(F, 'basketball'), S) :- holds(player(F), S).\npossible(move(F, 'soccer'), S) :- holds(player(F), S).\n\n% Moves that are opposite to each other.\nopposite_move('basketball', 'soccer').\nopposite_move('soccer', 'basketball').\n\n% The effects of a move: if F has chosen M, then in the next state this\n% is what they did.\neffect(did(F, M), move(F, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(F), move(F, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(F1, M1, U1, F2, M2, U2), S) :-\n    final(S),\n    holds(role(F1, basketball_enthusiast), S),\n    holds(did(F1, M1), S),\n    holds(role(F2, soccer_fan), S),\n    holds(did(F2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(F1, U1), S) :-\n    finally(outcome(F1, _, U1, _, _, _), S).\nfinally(goal(F2, U2), S) :-\n    finally(outcome(_, _, _, F2, _, U2), S).\n",
  "game_moves": [
    "basketball",
    "soccer"
  ],
  "game_players": [
    "f1",
    "f2"
  ],
  "status": "correct",
  "moves": [
    "basketball",
    "basketball",
    "soccer",
    "soccer"
  ],
  "payoffs": [
    2.0,
    0.0,
    1.0,
    0.0
  ],
  "total_payoff": 3.0,
  "default_move": "basketball",
  "trace_messages": [],
  "attempts": 1
}