{
  "name": "Rugifi",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for Battle of the Sexes (BoS)\n\n% Payoff matrix for BoS\npayoff('opera', 'opera', 2, 1).\npayoff('football', 'football', 1, 2).\npayoff('opera', 'football', 0, 0).\npayoff('football', 'opera', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role.\ninitially(player(opera_lover), s0).\ninitially(player(football_lover), s0).\ninitially(role(opera_lover, row), s0).\ninitially(role(football_lover, col), s0).\n\n% Initially who has control to make a move\ninitially(control(opera_lover), s0).\ninitially(control(football_lover), s0).\n\n% Default move\ninitially(default_move(_, 'opera'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_OtherPlayer, _OtherMove), do(move(_FirstPlayer, _FirstMove), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (it is their turn).\nlegal(move(Player, Move), S):- possible(move(Player, Move), S), holds(control(Player), S).\n\n% What is possible for a player to choose\npossible(move(Player,'opera'), S):- holds(player(Player), S).\npossible(move(Player,'football'), S):- holds(player(Player), S).\n\n% Moves that are opposite to each other.\nopposite_move('opera', 'football').\nopposite_move('football', 'opera').\n\n% The effects of a move: if Player has chosen Move, then in the next state this\n% is what they did.\neffect(did(Player, Move), move(Player, Move), _S).\n\n% The effects of a move: once a move is made, the player loses control; i.e.,\n% cannot move anymore.\nabnormal(control(Player), move(Player, _Move), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S):-\n    final(S),\n    holds(role(P1, row), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, col), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_, _, _, P2, _, U2), S).\n",
  "game_moves": [
    "opera",
    "football"
  ],
  "game_players": [
    "opera_lover",
    "football_lover"
  ],
  "status": "correct",
  "moves": [
    "opera",
    "opera",
    "football",
    "football"
  ],
  "payoffs": [
    2.0,
    0.0,
    1.0,
    0.0
  ],
  "total_payoff": 3.0,
  "default_move": "opera",
  "trace_messages": [],
  "attempts": 1
}