{
  "name": "Bedaqo",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous payoff/6.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for co-founders' celebration decision */\n\n% Payoff matrix for the co-founders' decision\npayoff('dinner', 'dinner', 2, 1).\npayoff('picnic', 'dinner', 1, 2).\npayoff('dinner', 'picnic', 0, 0).\npayoff('picnic', 'picnic', 1, 2).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(jordan), s0).\ninitially(player(casey), s0).\ninitially(role(jordan, decider1), s0).\ninitially(role(casey, decider2), s0).\ninitially(control(jordan), s0).\ninitially(control(casey), s0).\ninitially(default_move(_, 'dinner'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_CaseyChoice, _), do(move(_JordanChoice, _), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'dinner'), S) :- holds(player(P), S).\npossible(move(P, 'picnic'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('dinner', 'picnic').\nopposite_move('picnic', 'dinner').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(Jordan, JordanChoice, JordanUtility, Casey, CaseyChoice, CaseyUtility), S) :-\n    final(S),\n    holds(role(Jordan, decider1), S),\n    holds(did(Jordan, JordanChoice), S),\n    holds(role(Casey, decider2), S),\n    holds(did(Casey, CaseyChoice), S),\n    payoff(JordanChoice, CaseyChoice, JordanUtility, CaseyUtility).\n\n% Goals achieved by the players.\nfinally(goal(Jordan, JordanUtility), S) :-\n    finally(outcome(Jordan,_,JordanUtility,_,_,_), S).\nfinally(goal(Casey, CaseyUtility), S) :-\n    finally(outcome(_,_,_,Casey,_,CaseyUtility), S).\n",
  "game_moves": [
    "picnic",
    "dinner"
  ],
  "game_players": [
    "jordan",
    "casey"
  ],
  "status": "correct",
  "moves": [
    "dinner",
    "dinner",
    "picnic",
    "picnic"
  ],
  "payoffs": [
    2.0,
    0.0,
    1.0,
    1.0
  ],
  "total_payoff": 4.0,
  "default_move": "dinner",
  "trace_messages": [],
  "attempts": 1
}