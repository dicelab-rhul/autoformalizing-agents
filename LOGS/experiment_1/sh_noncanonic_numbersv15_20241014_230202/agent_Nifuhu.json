{
  "name": "Nifuhu",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n\n% Using discontiguous declaration for predicates that might not be contiguous\n:- discontiguous initially/2.\n:- discontiguous payoff/4.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous final/1.\n\n% Payoff matrix for the Tech Companies' Collaboration Game\npayoff('Commit', 'Commit', 10, 10).\npayoff('Commit', 'PullBack', 0, 5).\npayoff('PullBack', 'Commit', 5, 0).\npayoff('PullBack', 'PullBack', 4, 4).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(company1), s0).\ninitially(player(company2), s0).\ninitially(role(company1, first), s0).\ninitially(role(company2, second), s0).\ninitially(control(company1), s0).\ninitially(control(company2), s0).\ninitially(default_move(_, 'PullBack'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_C2, _M2), do(move(_C1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(C, M), S):- possible(move(C, M), S), holds(control(C), S).\n\n% What is possible for a player to choose\npossible(move(C,'Commit'), S):- holds(player(C), S).\npossible(move(C,'PullBack'), S):- holds(player(C), S).\n\n% Moves that are opposite to each other.\nopposite_move('Commit', 'PullBack').\nopposite_move('PullBack', 'Commit').\n\n% The effects of a move: if a company has chosen a move, then in the next state this\n% is what they did.\neffect(did(C, M), move(C, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(C), move(C, _M), _S).\n\n% What holds finally: the outcome with companies, Moves, and Utilities.\nfinally(outcome(C1, M1, U1, C2, M2, U2), S):-\n    final(S),\n    holds(role(C1, first), S),\n    holds(did(C1, M1), S),\n    holds(role(C2, second), S),\n    holds(did(C2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(C1, U1), S):-\n    finally(outcome(C1, _, U1, _, _, _), S).\nfinally(goal(C2, U2), S):-\n    finally(outcome(_, _, _, C2, _, U2), S).\n\n",
  "game_moves": [
    "Commit",
    "PullBack"
  ],
  "game_players": [
    "company1",
    "company2"
  ],
  "status": "correct",
  "moves": [
    "PullBack",
    "PullBack",
    "Commit",
    "Commit"
  ],
  "payoffs": [
    4.0,
    5.0,
    10.0,
    0.0
  ],
  "total_payoff": 19.0,
  "default_move": "PullBack",
  "trace_messages": [],
  "attempts": 1
}