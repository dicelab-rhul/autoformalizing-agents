{
  "name": "Zipotu",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": " \n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for Farmers' Dilemma */\n\n/* Payoff matrix for Farmers' Dilemma */\npayoff('H', 'H', 3, 3).\npayoff('C', 'H', 2, 8).\npayoff('H', 'C', 8, 2).\npayoff('C', 'C', 5, 5).\n\n/* Initial state */\ninitial(s0).\n\n/* What holds initially: who is a player, their role, and whether they can play */\ninitially(player(f1), s0).\ninitially(player(f2), s0).\ninitially(role(f1, row), s0).\ninitially(role(f2, col), s0).\ninitially(control(f1), s0).\ninitially(control(f2), s0).\ninitially(default_move(_, 'C'), s0).\n\n/* When a state is final: no need to check content as it's generated by game/2 */\nfinal(do(move(_F2, _M2), do(move(_F1, _M1), S))) :- initial(S).\n\n/* A legal move is a possible move where the player has control (is its turn) */\nlegal(move(F, M), S) :- possible(move(F, M), S), holds(control(F), S).\n\n/* What is possible for a player to choose */\npossible(move(F, 'C'), S) :- holds(player(F), S).\npossible(move(F, 'H'), S) :- holds(player(F), S).\n\n/* Moves that are opposite to each other */\nopposite_move('C', 'H').\nopposite_move('H', 'C').\n\n/* The effects of a move: if F has chosen M, then in the next state this is what they did */\neffect(did(F, M), move(F, M), _S).\n\n/* The effects of a move: once a move is made, the player loses control, i.e., cannot move anymore */\nabnormal(control(F), move(F, _M), _S).\n\n/* What holds finally: the outcome with players, Moves, and Utilities */\nfinally(outcome(F1, M1, U1, F2, M2, U2), S) :-\n    final(S),\n    holds(role(F1, row), S),\n    holds(did(F1, M1), S),\n    holds(role(F2, col), S),\n    holds(did(F2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n/* Goals achieved by the players */\nfinally(goal(F1, U1), S) :-\n    finally(outcome(F1, _, U1, _, _, _), S).\nfinally(goal(F2, U2), S) :-\n    finally(outcome(_, _, _, F2, _, U2), S).\n",
  "game_moves": [
    "C",
    "H"
  ],
  "game_players": [
    "f1",
    "f2"
  ],
  "status": "correct",
  "moves": [
    "C",
    "C",
    "H",
    "H"
  ],
  "payoffs": [
    5.0,
    2.0,
    3.0,
    8.0
  ],
  "total_payoff": 18.0,
  "default_move": "C",
  "trace_messages": [],
  "attempts": 1
}