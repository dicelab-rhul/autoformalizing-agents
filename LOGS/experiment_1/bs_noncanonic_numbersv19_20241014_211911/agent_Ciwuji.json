{
  "name": "Ciwuji",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous payoff/4.\n\n% Payoff matrix for the family vacation game\npayoff('Disneyland', 'Disneyland', 2, 1).\npayoff('Yellowstone', 'Yellowstone', 1, 2).\npayoff('Disneyland', 'Yellowstone', 0, 0).\npayoff('Yellowstone', 'Disneyland', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play\ninitially(player(sibling1), s0).\ninitially(player(sibling2), s0).\ninitially(role(sibling1, amusement_lover), s0).\ninitially(role(sibling2, nature_lover), s0).\ninitially(control(sibling1), s0).\ninitially(control(sibling2), s0).\ninitially(default_move(_, 'Disneyland'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_S2, _M2), do(move(_S1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(S, M), S0):- possible(move(S, M), S0), holds(control(S), S0).\n\n% What is possible for a player to choose\npossible(move(Sibling, 'Disneyland'), S0) :- holds(player(Sibling), S0).\npossible(move(Sibling, 'Yellowstone'), S0) :- holds(player(Sibling), S0).\n\n% Moves that are opposite to each other.\nopposite_move('Disneyland', 'Yellowstone').\nopposite_move('Yellowstone', 'Disneyland').\n\n% The effects of a move: if Sibling has chosen M, then in the next state this\n% is what they did.\neffect(did(S, M), move(S, M), _S0).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(Sibling), move(Sibling, _M), _S0).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(S1, M1, U1, S2, M2, U2), S):-\n    final(S),\n    holds(role(S1, amusement_lover), S),\n    holds(did(S1, M1), S),\n    holds(role(S2, nature_lover), S),\n    holds(did(S2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(S1, U1), S):-\n    finally(outcome(S1,_,U1,_,_,_), S).\nfinally(goal(S2, U2), S):-\n    finally(outcome(_,_,_,S2,_,U2), S).\n",
  "game_moves": [
    "Yellowstone",
    "Disneyland"
  ],
  "game_players": [
    "sibling1",
    "sibling2"
  ],
  "status": "correct",
  "moves": [
    "Disneyland",
    "Disneyland",
    "Yellowstone",
    "Yellowstone"
  ],
  "payoffs": [
    2.0,
    0.0,
    1.0,
    0.0
  ],
  "total_payoff": 3.0,
  "default_move": "Disneyland",
  "trace_messages": [],
  "attempts": 1
}