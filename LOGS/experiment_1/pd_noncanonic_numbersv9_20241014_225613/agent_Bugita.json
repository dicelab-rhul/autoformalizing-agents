{
  "name": "Bugita",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous payoff/4.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the Industrial Espionage game\npayoff('Spy', 'Spy', 2, 2).\npayoff('Spy', 'Refrain', 7, 1).\npayoff('Refrain', 'Spy', 1, 7).\npayoff('Refrain', 'Refrain', 5, 5).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(corp1), s0).\ninitially(player(corp2), s0).\ninitially(role(corp1, row), s0).\ninitially(role(corp2, col), s0).\ninitially(control(corp1), s0).\ninitially(control(corp2), s0).\ninitially(default_move(_, 'Refrain'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_Corp2, _M2), do(move(_Corp1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(Corp, M), S) :- possible(move(Corp, M), S), holds(control(Corp), S).\n\n% What is possible for a player to choose\npossible(move(Corp, 'Spy'), S) :- holds(player(Corp), S).\npossible(move(Corp, 'Refrain'), S) :- holds(player(Corp), S).\n\n% Moves that are opposite to each other.\nopposite_move('Spy', 'Refrain').\nopposite_move('Refrain', 'Spy').\n\n% The effects of a move: if Corp has chosen M, then in the next state this\n% is what they did.\neffect(did(Corp, M), move(Corp, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(Corp), move(Corp, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(Corp1, M1, U1, Corp2, M2, U2), S) :-\n    final(S),\n    holds(role(Corp1, row), S),\n    holds(did(Corp1, M1), S),\n    holds(role(Corp2, col), S),\n    holds(did(Corp2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(Corp1, U1), S) :-\n    finally(outcome(Corp1, _, U1, _, _, _), S).\nfinally(goal(Corp2, U2), S) :-\n    finally(outcome(_, _, _, Corp2, _, U2), S).\n",
  "game_moves": [
    "Refrain",
    "Spy"
  ],
  "game_players": [
    "corp1",
    "corp2"
  ],
  "status": "correct",
  "moves": [
    "Refrain",
    "Refrain",
    "Spy",
    "Spy"
  ],
  "payoffs": [
    5.0,
    1.0,
    2.0,
    7.0
  ],
  "total_payoff": 15.0,
  "default_move": "Refrain",
  "trace_messages": [],
  "attempts": 1
}