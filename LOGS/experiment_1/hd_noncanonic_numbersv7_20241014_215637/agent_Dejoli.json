{
  "name": "Dejoli",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": " \n\n:- discontiguous payoff/6.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for Advertising Game (AG)\n\n/* Payoff matrix for Advertising Game */\npayoff('Aggressive', 'Aggressive', -20, -20).\npayoff('Moderate', 'Aggressive', -4, 4).\npayoff('Aggressive', 'Moderate', 4, -4).\npayoff('Moderate', 'Moderate', 0, 0).\n\n/* Initial state */\ninitial(s0).\n\n/* What holds initially: who is a player, their role, and whether they can play */\ninitially(player(c1), s0).\ninitially(player(c2), s0).\ninitially(role(c1, comp1), s0).\ninitially(role(c2, comp2), s0).\ninitially(control(c1), s0).\ninitially(control(c2), s0).\ninitially(default_move(_, 'Moderate'), s0).\n\n/* When a state is final: no need to check content as it is generated by game/2,\n   implying it is a legal state */\nfinal(do(move(_C2, _M2), do(move(_C1, _M1), S))):- initial(S).\n\n/* A legal move is a possible move where the player has control (is its turn) */\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n/* What is possible for a player to choose */\npossible(move(P, 'Aggressive'), S):- holds(player(P), S).\npossible(move(P, 'Moderate'), S):- holds(player(P), S).\n\n/* Moves that are opposite to each other */\nopposite_move('Moderate', 'Aggressive').\nopposite_move('Aggressive', 'Moderate').\n\n/* The effects of a move: if P has chosen M, then in the next state this is what they did */\neffect(did(P, M), move(P, M), _S).\n\n/* The effects of a move: once a move is made, the player loses control, i.e.,\n   cannot move anymore */\nabnormal(control(P), move(P, _M), _S).\n\n/* What holds finally: the outcome with players, Moves and Utilities */\nfinally(outcome(C1, M1, U1, C2, M2, U2), S):-\n    final(S),\n    holds(role(C1, comp1), S),\n    holds(did(C1, M1), S),\n    holds(role(C2, comp2), S),\n    holds(did(C2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n/* Goals achieved by the players */\nfinally(goal(C1, U1), S):-\n    finally(outcome(C1, _, U1, _, _, _), S).\nfinally(goal(C2, U2), S):-\n    finally(outcome(_, _, _, C2, _, U2), S).\n\n",
  "game_moves": [
    "Aggressive",
    "Moderate"
  ],
  "game_players": [
    "c1",
    "c2"
  ],
  "status": "correct",
  "moves": [
    "Moderate",
    "Moderate",
    "Aggressive",
    "Aggressive"
  ],
  "payoffs": [
    0.0,
    -4.0,
    -20.0,
    4.0
  ],
  "total_payoff": -20.0,
  "default_move": "Moderate",
  "trace_messages": [],
  "attempts": 1
}