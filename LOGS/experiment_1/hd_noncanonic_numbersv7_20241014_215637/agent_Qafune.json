{
  "name": "Qafune",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for Companies Advertisement Game\n\n% Payoff matrix for Advertisement Game\npayoff('Aggressive', 'Aggressive', -20, -20).\npayoff('Moderate', 'Aggressive', -4, 4).\npayoff('Aggressive', 'Moderate', 4, -4).\npayoff('Moderate', 'Moderate', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: players, roles, and default moves.\ninitially(player(company1), s0).\ninitially(player(company2), s0).\ninitially(role(company1, first), s0).\ninitially(role(company2, second), s0).\ninitially(control(company1), s0).\ninitially(control(company2), s0).\ninitially(default_move(_, 'Moderate'), s0).\n\n% Final state criteria\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):- initial(S).\n\n% A legal move: a possible move where the player has control.\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'Aggressive'), S):- holds(player(P), S).\npossible(move(P, 'Moderate'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('Moderate', 'Aggressive').\nopposite_move('Aggressive', 'Moderate').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S):-\n    final(S),\n    holds(role(P1, first), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, second), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_, _, _, P2, _, U2), S).\n",
  "game_moves": [
    "Aggressive",
    "Moderate"
  ],
  "game_players": [
    "company1",
    "company2"
  ],
  "status": "correct",
  "moves": [
    "Moderate",
    "Moderate",
    "Aggressive",
    "Aggressive"
  ],
  "payoffs": [
    0.0,
    -4.0,
    -20.0,
    4.0
  ],
  "total_payoff": -20.0,
  "default_move": "Moderate",
  "trace_messages": [],
  "attempts": 1
}