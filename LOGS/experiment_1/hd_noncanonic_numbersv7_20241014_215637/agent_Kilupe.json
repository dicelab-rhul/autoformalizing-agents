{
  "name": "Kilupe",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous payoff/4.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for the Advertising Game */\n\n% Payoff matrix for the Advertising Game\npayoff('Aggressive', 'Aggressive', -20, -20).\npayoff('Moderate', 'Aggressive', -4, 4).\npayoff('Aggressive', 'Moderate', 4, -4).\npayoff('Moderate', 'Moderate', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(company1), s0).\ninitially(player(company2), s0).\ninitially(role(company1, market_leader), s0).\ninitially(role(company2, challenger), s0).\ninitially(control(company1), s0).\ninitially(control(company2), s0).\ninitially(default_move(_, 'Moderate'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_Company2, _Move2), do(move(_Company1, _Move1), S))):-initial(S).\n\n% A legal move is a possible move where the company has control (is its turn).\nlegal(move(Company, Move), S):- possible(move(Company, Move), S), holds(control(Company), S).\n\n% What is possible for a company to choose\npossible(move(Company, 'Aggressive'), S):- holds(player(Company), S).\npossible(move(Company, 'Moderate'), S):- holds(player(Company), S).\n\n% Moves that are opposite to each other.\nopposite_move('Moderate', 'Aggressive').\nopposite_move('Aggressive', 'Moderate').\n\n% The effects of a move: if Company has chosen Move, then in the next state this\n% is what they did.\neffect(did(Company, Move), move(Company, Move), _S).\n\n% The effects of a move: once a move is made, the company loses control, i.e.\n% cannot move anymore.\nabnormal(control(Company), move(Company, _Move), _S).\n\n% What holds finally: the outcome with companies, Moves, and Utilities.\nfinally(outcome(Company1, Move1, Points1, Company2, Move2, Points2), S):-\n    final(S),\n    holds(role(Company1, market_leader), S),\n    holds(did(Company1, Move1), S),\n    holds(role(Company2, challenger), S),\n    holds(did(Company2, Move2), S),\n    payoff(Move1, Move2, Points1, Points2).\n\n% Goals achieved by the companies.\nfinally(goal(Company1, Points1), S):-\n    finally(outcome(Company1, _, Points1, _, _, _), S).\nfinally(goal(Company2, Points2), S):-\n    finally(outcome(_, _, _, Company2, _, Points2), S).\n",
  "game_moves": [
    "Aggressive",
    "Moderate"
  ],
  "game_players": [
    "company1",
    "company2"
  ],
  "status": "correct",
  "moves": [
    "Moderate",
    "Moderate",
    "Aggressive",
    "Aggressive"
  ],
  "payoffs": [
    0.0,
    -4.0,
    -20.0,
    4.0
  ],
  "total_payoff": -20.0,
  "default_move": "Moderate",
  "trace_messages": [],
  "attempts": 1
}