{
  "name": "Volatu",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": " \n% Discontiguous declaration\n:- discontiguous initial/1.\n:- discontiguous payoff/5.\n:- discontiguous initially/2.\n:- discontiguous opposite_move/2.\n:- discontiguous final/1.\n\n% Game specific predicates for CO2 Emission Reduction Negotiation\n\n% Payoff matrix for the game\npayoff('high', 'high', -10, -10).\npayoff('cut', 'high', -4, 4).\npayoff('high', 'cut', 4, -4).\npayoff('cut', 'cut', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(c1), s0).\ninitially(player(c2), s0).\ninitially(role(c1, row), s0).\ninitially(role(c2, col), s0).\ninitially(control(c1), s0).\ninitially(control(c2), s0).\ninitially(default_move(_, 'cut'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_C2, _M2), do(move(_C1, _M1), S))):-initial(S).\n\n% What is possible for a player to choose\npossible(move(P, 'high'), S):- holds(player(P), S).\npossible(move(P, 'cut'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('high', 'cut').\nopposite_move('cut', 'high').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player looses control, i.e.\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(C1, M1, U1, C2, M2, U2), S):-\n    final(S),\n    holds(role(C1, row), S),\n    holds(did(C1, M1), S),\n    holds(role(C2, col), S),\n    holds(did(C2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(C1, U1), S):-\n    finally(outcome(C1, _, U1, _, _, _), S).\nfinally(goal(C2, U2), S):-\n    finally(outcome(_, _, _, C2, _, U2), S).\n",
  "game_moves": [
    "cut",
    "high"
  ],
  "game_players": [
    "c1",
    "c2"
  ],
  "status": "correct",
  "moves": [
    "cut",
    "cut",
    "high",
    "high"
  ],
  "payoffs": [
    0.0,
    -4.0,
    -10.0,
    4.0
  ],
  "total_payoff": -10.0,
  "default_move": "cut",
  "trace_messages": [],
  "attempts": 1
}