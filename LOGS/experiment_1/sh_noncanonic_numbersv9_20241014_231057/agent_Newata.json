{
  "name": "Newata",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": " \n:- discontiguous initially/2.\n:- discontiguous payoff/4.\n:- discontiguous possible/2.\n:- discontiguous holds/2.\n:- discontiguous final/1.\n\n% Domain-specific predicates for the logging game\n\n% Payoff matrix\npayoff('S', 'S', 7, 7).\npayoff('S', 'N', 0, 4).\npayoff('N', 'S', 4, 0).\npayoff('N', 'N', 3, 3).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role and whether they can play\ninitially(player(comp1), s0).\ninitially(player(comp2), s0).\ninitially(role(comp1, role1), s0).\ninitially(role(comp2, role2), s0).\ninitially(control(comp1), s0).\ninitially(control(comp2), s0).\ninitially(default_move(_, 'N'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is their turn)\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'S'), S):- holds(player(P), S).\npossible(move(P, 'N'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other\nopposite_move('S', 'N').\nopposite_move('N', 'S').\n\n% The effects of a move: if P has chosen M, then in the next state this is what they did\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e. cannot move anymore\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities\nfinally(outcome(P1, M1, U1, P2, M2, U2), S):-\n    final(S),\n    holds(role(P1, role1), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, role2), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players\nfinally(goal(P1, U1), S):- finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S):- finally(outcome(_, _, _, P2, _, U2), S).\n",
  "game_moves": [
    "N",
    "S"
  ],
  "game_players": [
    "comp1",
    "comp2"
  ],
  "status": "correct",
  "moves": [
    "N",
    "N",
    "S",
    "S"
  ],
  "payoffs": [
    3.0,
    4.0,
    7.0,
    0.0
  ],
  "total_payoff": 14.0,
  "default_move": "N",
  "trace_messages": [],
  "attempts": 1
}