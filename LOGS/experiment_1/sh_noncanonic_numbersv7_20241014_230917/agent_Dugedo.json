{
  "name": "Dugedo",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for Community Garden Game */\n\n% Payoff matrix for Community Garden Game\npayoff('work', 'work', 6, 6).\npayoff('work', 'slack', 0, 3).\npayoff('slack', 'work', 3, 0).\npayoff('slack', 'slack', 1, 1).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(n1), s0).\ninitially(player(n2), s0).\ninitially(role(n1,row), s0).\ninitially(role(n2,col), s0).\ninitially(control(n1), s0).\ninitially(control(n2), s0).\ninitially(default_move(_, 'slack'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_N2, _M2), do(move(_N1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P,'work'), S):- holds(player(P), S).\npossible(move(P,'slack'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('work', 'slack').\nopposite_move('slack', 'work').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(N1,M1,U1,N2,M2,U2), S):-\n    final(S),\n    holds(role(N1, row), S),\n    holds(did(N1, M1), S),\n    holds(role(N2, col), S),\n    holds(did(N2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(N1, U1), S):-\n    finally(outcome(N1,_,U1,_,_,_), S).\nfinally(goal(N2, U2), S):-\n    finally(outcome(_,_,_,N2,_,U2), S).\n\n",
  "game_moves": [
    "work",
    "slack"
  ],
  "game_players": [
    "n1",
    "n2"
  ],
  "status": "correct",
  "moves": [
    "slack",
    "slack",
    "work",
    "work"
  ],
  "payoffs": [
    1.0,
    3.0,
    6.0,
    0.0
  ],
  "total_payoff": 10.0,
  "default_move": "slack",
  "trace_messages": [],
  "attempts": 1
}