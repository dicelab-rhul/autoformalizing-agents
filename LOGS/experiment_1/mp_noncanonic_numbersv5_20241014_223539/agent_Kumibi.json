{
  "name": "Kumibi",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n\n/* Game specific predicates for the Political Campaign Game */\n\n% Payoff matrix for the Campaign Game\npayoff('econ', 'econ', 5, -5).\npayoff('social', 'social', 5, -5).\npayoff('econ', 'social', -4, 4).\npayoff('social', 'econ', -4, 4).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(candA), s0).\ninitially(player(candB), s0).\ninitially(role(candA, underdog), s0).\ninitially(role(candB, frontrunner), s0).\ninitially(control(candA), s0).\ninitially(control(candB), s0).\ninitially(default_move(_, 'econ'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_CandB, _MovB), do(move(_CandA, _MovA), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is their turn).\nlegal(move(Cand, Mov), S):- possible(move(Cand, Mov), S), holds(control(Cand), S).\n\n% What is possible for a player to choose\npossible(move(Cand, 'econ'), S):- holds(player(Cand), S).\npossible(move(Cand, 'social'), S):- holds(player(Cand), S).\n\n% Moves that are opposite to each other.\nopposite_move('econ', 'social').\nopposite_move('social', 'econ').\n\n% The effects of a move: if Cand has chosen Mov, then in the next state this\n% is what they did.\neffect(did(Cand, Mov), move(Cand, Mov), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(Cand), move(Cand, _Mov), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(CandA, MovA, UtilA, CandB, MovB, UtilB), S):-\n    final(S),\n    holds(role(CandA, underdog), S),\n    holds(did(CandA, MovA), S),\n    holds(role(CandB, frontrunner), S),\n    holds(did(CandB, MovB), S),\n    payoff(MovA, MovB, UtilA, UtilB).\n\n% Goals achieved by the players.\nfinally(goal(CandA, UtilA), S):-\n    finally(outcome(CandA, _, UtilA, _, _, _), S).\nfinally(goal(CandB, UtilB), S):-\n    finally(outcome(_, _, _, CandB, _, UtilB), S).\n\n",
  "game_moves": [
    "econ",
    "social"
  ],
  "game_players": [
    "candA",
    "candB"
  ],
  "status": "correct",
  "moves": [
    "econ",
    "econ",
    "social",
    "social"
  ],
  "payoffs": [
    5.0,
    -4.0,
    5.0,
    -4.0
  ],
  "total_payoff": 2.0,
  "default_move": "econ",
  "trace_messages": [],
  "attempts": 1
}