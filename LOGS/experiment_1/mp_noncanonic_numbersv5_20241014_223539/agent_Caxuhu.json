{
  "name": "Caxuhu",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n\n% Declare discontiguous predicates\n:- discontiguous payoff/6.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the campaign game\npayoff('economic', 'economic', 5, -5).\npayoff('social', 'social', 5, -5).\npayoff('economic', 'social', -4, 4).\npayoff('social', 'economic', -4, 4).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(candidate_a), s0).\ninitially(player(candidate_b), s0).\ninitially(role(candidate_a, underdog), s0).\ninitially(role(candidate_b, frontrunner), s0).\ninitially(control(candidate_a), s0).\ninitially(control(candidate_b), s0).\ninitially(default_move(_, 'economic'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_C2, _F2), do(move(_C1, _F1), S))):-initial(S).\n\n% A legal move is a possible move where the candidate has control (is their turn).\nlegal(move(C, F), S):- possible(move(C, F), S), holds(control(C), S).\n\n% What is possible for a candidate to choose\npossible(move(Candidate, 'economic'), S):- holds(player(Candidate), S).\npossible(move(Candidate, 'social'), S):- holds(player(Candidate), S).\n\n% Moves that are opposite to each other.\nopposite_move('economic', 'social').\nopposite_move('social', 'economic').\n\n% The effects of a move: if C has chosen F, then in the next state this\n% is what they did.\neffect(did(C, F), move(C, F), _S).\n\n% The effects of a move: once a move is made, the candidate loses control, i.e.\n% cannot move anymore.\nabnormal(control(C), move(C, _F), _S).\n\n% What holds finally: the outcome with candidates, Focuses, and Utilities.\nfinally(outcome(C1,F1,U1,C2,F2,U2), S):-\n    final(S),\n    holds(role(C1, underdog), S),\n    holds(did(C1, F1), S),\n    holds(role(C2, frontrunner), S),\n    holds(did(C2, F2), S),\n    payoff(F1, F2, U1, U2).\n\n% Goals achieved by the candidates.\nfinally(goal(C1, U1), S):-\n    finally(outcome(C1,_,U1,_,_,_), S).\nfinally(goal(C2, U2), S):-\n    finally(outcome(_,_,_,C2,_,U2), S).\n\n",
  "game_moves": [
    "economic",
    "social"
  ],
  "game_players": [
    "candidate_a",
    "candidate_b"
  ],
  "status": "correct",
  "moves": [
    "economic",
    "economic",
    "social",
    "social"
  ],
  "payoffs": [
    5.0,
    -4.0,
    5.0,
    -4.0
  ],
  "total_payoff": 2.0,
  "default_move": "economic",
  "trace_messages": [],
  "attempts": 1
}