{
  "name": "Moheni",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n:- discontiguous payoff/4.\n\n/* Game specific predicates for Electric Vehicle Game (EVG) */\n\n% Payoff matrix for EVG\npayoff('Sedan', 'Sedan', 10, -10).\npayoff('Sedan', 'SUV', -15, 15).\npayoff('SUV', 'Sedan', -15, 15).\npayoff('SUV', 'SUV', 10, -10).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(small_company), s0).\ninitially(player(large_manufacturer), s0).\ninitially(role(small_company, player1), s0).\ninitially(role(large_manufacturer, player2), s0).\ninitially(control(small_company), s0).\ninitially(control(large_manufacturer), s0).\ninitially(default_move(_, 'Sedan'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'Sedan'), S):- holds(player(P), S).\npossible(move(P, 'SUV'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('Sedan', 'SUV').\nopposite_move('SUV', 'Sedan').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S):-\n    final(S),\n    holds(role(P1, player1), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, player2), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_, _, _, P2, _, U2), S).\n",
  "game_moves": [
    "SUV",
    "Sedan"
  ],
  "game_players": [
    "small_company",
    "large_manufacturer"
  ],
  "status": "correct",
  "moves": [
    "Sedan",
    "Sedan",
    "SUV",
    "SUV"
  ],
  "payoffs": [
    10.0,
    -15.0,
    10.0,
    -15.0
  ],
  "total_payoff": -10.0,
  "default_move": "Sedan",
  "trace_messages": [],
  "attempts": 1
}