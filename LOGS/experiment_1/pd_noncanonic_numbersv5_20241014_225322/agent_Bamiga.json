{
  "name": "Bamiga",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous payoff/5.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Game specific predicates for the mudslinging game\n\n% Payoff matrix for the mudslinging game\npayoff('M', 'M', 3, 3).\npayoff('C', 'M', 2, 8).\npayoff('M', 'C', 8, 2).\npayoff('C', 'C', 5, 5).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(c1), s0).\ninitially(player(c2), s0).\ninitially(role(c1, row), s0).\ninitially(role(c2, col), s0).\ninitially(control(c1), s0).\ninitially(control(c2), s0).\ninitially(default_move(_, 'C'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_C2, _M2), do(move(_C1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(C, M), S):- possible(move(C, M), S), holds(control(C), S).\n\n% What is possible for a player to choose\npossible(move(C, 'M'), S):- holds(player(C), S).\npossible(move(C, 'C'), S):- holds(player(C), S).\n\n% Moves that are opposite to each other.\nopposite_move('C', 'M').\nopposite_move('M', 'C').\n\n% The effects of a move: if C has chosen M, then in the next state this\n% is what they did.\neffect(did(C, M), move(C, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(C), move(C, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(C1,M1,U1,C2,M2,U2), S):-\n    final(S),\n    holds(role(C1, row), S),\n    holds(did(C1, M1), S),\n    holds(role(C2, col), S),\n    holds(did(C2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(C1, U1), S):-\n    finally(outcome(C1,_,U1,_,_,_), S).\nfinally(goal(C2, U2), S):-\n    finally(outcome(_,_,_,C2,_,U2), S).\n",
  "game_moves": [
    "C",
    "M"
  ],
  "game_players": [
    "c1",
    "c2"
  ],
  "status": "correct",
  "moves": [
    "C",
    "C",
    "M",
    "M"
  ],
  "payoffs": [
    5.0,
    2.0,
    3.0,
    8.0
  ],
  "total_payoff": 18.0,
  "default_move": "C",
  "trace_messages": [],
  "attempts": 1
}