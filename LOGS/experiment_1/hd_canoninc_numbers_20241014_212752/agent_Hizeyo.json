{
  "name": "Hizeyo",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous payoff/4.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous opposite_move/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for Chicken Game */\n\n% Payoff matrix for Chicken Game\npayoff('swerve', 'swerve', 0, 0).\npayoff('swerve', 'straight', -1, 1).\npayoff('straight', 'swerve', 1, -1).\npayoff('straight', 'straight', -10, -10).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(d1), s0).\ninitially(player(d2), s0).\ninitially(role(d1,row), s0).\ninitially(role(d2,col), s0).\ninitially(control(d1), s0).\ninitially(control(d2), s0).\ninitially(default_move(_, 'swerve'), s0).\n\n% A state is final after both drivers have made their moves.\nfinal(do(move(_D2, _M2), do(move(_D1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(D, M), S):- possible(move(D, M), S), holds(control(D), S).\n\n% What is possible for a player to choose\npossible(move(D, 'swerve'), S):- holds(player(D), S).\npossible(move(D, 'straight'), S):- holds(player(D), S).\n\n% Moves that are opposite to each other.\nopposite_move('swerve', 'straight').\nopposite_move('straight', 'swerve').\n\n% The effects of a move: if a player has chosen a move, then in the next state this is what they did.\neffect(did(D, M), move(D, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e., cannot move anymore.\nabnormal(control(D), move(D, _M), _S).\n\n% What holds finally: the outcome with players, moves, and utilities.\nfinally(outcome(D1, M1, U1, D2, M2, U2), S):-\n    final(S),\n    holds(role(D1, row), S),\n    holds(did(D1, M1), S),\n    holds(role(D2, col), S),\n    holds(did(D2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(D1, U1), S):-\n    finally(outcome(D1, _, U1, _, _, _), S).\nfinally(goal(D2, U2), S):-\n    finally(outcome(_, _, _, D2, _, U2), S).\n",
  "game_moves": [
    "straight",
    "swerve"
  ],
  "game_players": [
    "d1",
    "d2"
  ],
  "status": "correct",
  "moves": [
    "swerve",
    "swerve",
    "straight",
    "straight"
  ],
  "payoffs": [
    0.0,
    -1.0,
    -10.0,
    1.0
  ],
  "total_payoff": -10.0,
  "default_move": "swerve",
  "trace_messages": [],
  "attempts": 1
}