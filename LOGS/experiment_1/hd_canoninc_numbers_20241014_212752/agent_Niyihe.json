{
  "name": "Niyihe",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": " \n:- discontiguous initial/1, payoff/4, final/1, initially/2, legal/2, possible/2, opposite_move/2, effect/3, abnormal/3, finally/2.\n\n/* Game specific predicates for Chicken Game */\n\n% Payoff matrix for Chicken Game\npayoff('straight', 'straight', -10, -10).\npayoff('swerve', 'straight', -1, 1).\npayoff('straight', 'swerve', 1, -1).\npayoff('swerve', 'swerve', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(driver1), s0).\ninitially(player(driver2), s0).\ninitially(role(driver1, row), s0).\ninitially(role(driver2, col), s0).\ninitially(control(driver1), s0).\ninitially(control(driver2), s0).\ninitially(default_move(_, 'swerve'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_D2, _M2), do(move(_D1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(D, M), S) :- possible(move(D, M), S), holds(control(D), S).\n\n% What is possible for a player to choose\npossible(move(D, 'straight'), S) :- holds(player(D), S).\npossible(move(D, 'swerve'), S) :- holds(player(D), S).\n\n% Moves that are opposite to each other.\nopposite_move('swerve', 'straight').\nopposite_move('straight', 'swerve').\n\n% The effects of a move: if D has chosen M, then in the next state this\n% is what they did.\neffect(did(D, M), move(D, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore.\nabnormal(control(D), move(D, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(D1, M1, U1, D2, M2, U2), S) :-\n    final(S),\n    holds(role(D1, row), S),\n    holds(did(D1, M1), S),\n    holds(role(D2, col), S),\n    holds(did(D2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(D1, U1), S) :-\n    finally(outcome(D1, _, U1, _, _, _), S).\nfinally(goal(D2, U2), S) :-\n    finally(outcome(_, _, _, D2, _, U2), S).\n",
  "game_moves": [
    "straight",
    "swerve"
  ],
  "game_players": [
    "driver1",
    "driver2"
  ],
  "status": "correct",
  "moves": [
    "swerve",
    "swerve",
    "straight",
    "straight"
  ],
  "payoffs": [
    0.0,
    -1.0,
    -10.0,
    1.0
  ],
  "total_payoff": -10.0,
  "default_move": "swerve",
  "trace_messages": [],
  "attempts": 1
}