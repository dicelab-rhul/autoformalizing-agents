{
  "name": "Kanofu",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": " \n% Discontiguous predicates\n:- discontiguous possible/3.\n:- discontiguous effect/3.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n\n% Payoff matrix for the new game\npayoff('Collaborate', 'Collaborate', 7, 7).\npayoff('Disengage', 'Collaborate', 3, 0).\npayoff('Collaborate', 'Disengage', 0, 3).\npayoff('Disengage', 'Disengage', 2, 2).\n\n% Initial state\ninitial(s0).\n\n% What holds initially\ninitially(player(director1), s0).\ninitially(player(director2), s0).\ninitially(role(director1, row), s0).\ninitially(role(director2, col), s0).\ninitially(control(director1), s0).\ninitially(control(director2), s0).\ninitially(default_move(_, 'Disengage'), s0).\n\n% When a state is final\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn)\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'Collaborate'), S):- holds(player(P), S).\npossible(move(P, 'Disengage'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other\nopposite_move('Collaborate', 'Disengage').\nopposite_move('Disengage', 'Collaborate').\n\n% The effects of a move: if P has chosen M, then in the next state, this is what they did\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e., cannot move anymore\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities\nfinally(outcome(P1, M1, U1, P2, M2, U2), S):-\n    final(S),\n    holds(role(P1, row), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, col), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_, _, _, P2, _, U2), S).\n",
  "game_moves": [
    "Collaborate",
    "Disengage"
  ],
  "game_players": [
    "director1",
    "director2"
  ],
  "status": "correct",
  "moves": [
    "Disengage",
    "Disengage",
    "Collaborate",
    "Collaborate"
  ],
  "payoffs": [
    2.0,
    3.0,
    7.0,
    0.0
  ],
  "total_payoff": 12.0,
  "default_move": "Disengage",
  "trace_messages": [],
  "attempts": 1
}