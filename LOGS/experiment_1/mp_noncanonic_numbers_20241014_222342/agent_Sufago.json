{
  "name": "Sufago",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n% Domain specific predicates for the Gallery Promotion game\n\n% Discontiguous declaration\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff: matching choice yields a loss for big gallery and win for small gallery, and vice versa\npayoff('PromoteA', 'PromoteA', 1, -1).\npayoff('PromoteB', 'PromoteB', 1, -1).\npayoff('PromoteA', 'PromoteB', -1, 1).\npayoff('PromoteB', 'PromoteA', -1, 1).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play\ninitially(player(small_gallery_owner), s0).\ninitially(player(big_gallery_owner), s0).\ninitially(role(small_gallery_owner, small), s0).\ninitially(role(big_gallery_owner, big), s0).\ninitially(control(small_gallery_owner), s0).\ninitially(control(big_gallery_owner), s0).\ninitially(default_move(_, 'PromoteA'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn)\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'PromoteA'), S):- holds(player(P), S).\npossible(move(P, 'PromoteB'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other\nopposite_move('PromoteA', 'PromoteB').\nopposite_move('PromoteB', 'PromoteA').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.\n% cannot move anymore\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities\nfinally(outcome(P1,M1,U1,P2,M2,U2), S):-\n    final(S),\n    holds(role(P1, small), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, big), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1,_,U1,_,_,_), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_,_,_,P2,_,U2), S).\n",
  "game_moves": [
    "PromoteA",
    "PromoteB"
  ],
  "game_players": [
    "small_gallery_owner",
    "big_gallery_owner"
  ],
  "status": "correct",
  "moves": [
    "PromoteA",
    "PromoteA",
    "PromoteB",
    "PromoteB"
  ],
  "payoffs": [
    1.0,
    -1.0,
    1.0,
    -1.0
  ],
  "total_payoff": 0.0,
  "default_move": "PromoteA",
  "trace_messages": [],
  "attempts": 1
}