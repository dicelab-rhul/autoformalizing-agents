{
  "name": "Jeroqu",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": " \n:- discontiguous initial/1, initially/2, final/1, legal/2, possible/2, effect/3, abnormal/3, finally/2.\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(manager1), s0).\ninitially(player(manager2), s0).\ninitially(role(manager1, hall_advocate), s0).\ninitially(role(manager2, tech_advocate), s0).\ninitially(control(manager1), s0).\ninitially(control(manager2), s0).\ninitially(default_move(_, 'grand_conference_hall'), s0).\n\n% Payoff matrix for the strategy session game\npayoff('grand_conference_hall', 'grand_conference_hall', 2, 1). \npayoff('tech_innovation_center', 'tech_innovation_center', 1, 2).\npayoff('grand_conference_hall', 'tech_innovation_center', 0, 0).\npayoff('tech_innovation_center', 'grand_conference_hall', 0, 0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_M2, _M1), do(move(_M1, _M2), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is their turn).\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'grand_conference_hall'), S) :- holds(player(P), S).\npossible(move(P, 'tech_innovation_center'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('grand_conference_hall', 'tech_innovation_center').\nopposite_move('tech_innovation_center', 'grand_conference_hall').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(P1, M1, U1, P2, M2, U2), S) :-\n    final(S),\n    holds(role(P1, hall_advocate), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, tech_advocate), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(P1, U1), S) :-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S) :-\n    finally(outcome(_, _, _, P2, _, U2), S).\n",
  "game_moves": [],
  "game_players": [],
  "status": "syntactic_error",
  "moves": [],
  "payoffs": [],
  "total_payoff": 0,
  "default_move": null,
  "trace_messages": [],
  "attempts": 5
}