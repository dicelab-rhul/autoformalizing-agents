{
  "name": "Noduki",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n\n:- discontiguous possible/3.\n:- discontiguous initial/1.\n\n% Payoff matrix for the collaboration game\npayoff('I', 'I', 3, 3).\npayoff('C', 'I', 0, 5).\npayoff('I', 'C', 5, 0).\npayoff('C', 'C', 8, 8).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play\ninitially(player(r1), s0).\ninitially(player(r2), s0).\ninitially(role(r1, row), s0).\ninitially(role(r2, col), s0).\ninitially(control(r1), s0).\ninitially(control(r2), s0).\ninitially(default_move(_, 'I'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state\nfinal(do(move(_R2, _M2), do(move(_R1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn)\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P,'C'), S):- holds(player(P), S).\npossible(move(P,'I'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other\nopposite_move('C', 'I').\nopposite_move('I', 'C').\n\n% The effects of a move: if P has chosen M, then in the next state this\n% is what they did\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities\nfinally(outcome(R1, M1, U1, R2, M2, U2), S):-\n    final(S),\n    holds(role(R1, row), S),\n    holds(did(R1, M1), S),\n    holds(role(R2, col), S),\n    holds(did(R2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players\nfinally(goal(R1, U1), S):-\n    finally(outcome(R1, _, U1, _, _, _), S).\nfinally(goal(R2, U2), S):-\n    finally(outcome(_, _, _, R2, _, U2), S).\n\n",
  "game_moves": [
    "C",
    "I"
  ],
  "game_players": [
    "r1",
    "r2"
  ],
  "status": "correct",
  "moves": [
    "I",
    "I",
    "C",
    "C"
  ],
  "payoffs": [
    3.0,
    5.0,
    8.0,
    0.0
  ],
  "total_payoff": 16.0,
  "default_move": "I",
  "trace_messages": [],
  "attempts": 1
}