{
  "name": "Netika",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for the cold war game */\n\n/* Payoff matrix for the cold war game */\npayoff('Build', 'Build', 4, 4).\npayoff('Disarm', 'Build', 1, 7).\npayoff('Build', 'Disarm', 7, 1).\npayoff('Disarm', 'Disarm', 6, 6).\n\n/* Initial state */\ninitial(s0).\n\n/* What holds initially: who is a player, their role, and whether they can play. */\ninitially(player(nation1), s0).\ninitially(player(nation2), s0).\ninitially(role(nation1, row), s0).\ninitially(role(nation2, col), s0).\ninitially(control(nation1), s0).\ninitially(control(nation2), s0).\ninitially(default_move(_, 'Disarm'), s0).\n\n/* When a state is final: no need to check content as it generated by game/2, \nimplying it is a legal state. */\nfinal(do(move(_N2, _M2), do(move(_N1, _M1), S))):- initial(S).\n\n/* A legal move is a possible move where the player has control (is its turn). */\nlegal(move(N, M), S):- possible(move(N, M), S), holds(control(N), S).\n\n/* What is possible for a player to choose */\npossible(move(N,'Build'), S):- holds(player(N), S).\npossible(move(N,'Disarm'), S):- holds(player(N), S).\n\n/* Moves that are opposite to each other. */\nopposite_move('Build', 'Disarm').\nopposite_move('Disarm', 'Build').\n\n/* The effects of a move: if N has chosen M, then in the next state this is what they did. */\neffect(did(N, M), move(N, M), _S).\n\n/* The effects of a move: once a move is made, the player loses control, i.e. cannot move anymore. */\nabnormal(control(N), move(N, _M), _S).\n\n/* What holds finally: the outcome with players, Moves, and Utilities. */\nfinally(outcome(N1, M1, U1, N2, M2, U2), S):-\n    final(S),\n    holds(role(N1, row), S),\n    holds(did(N1, M1), S),\n    holds(role(N2, col), S),\n    holds(did(N2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n/* Goals achieved by the players. */\nfinally(goal(N1, U1), S):-\n    finally(outcome(N1, _, U1, _, _, _), S).\nfinally(goal(N2, U2), S):-\n    finally(outcome(_, _, _, N2, _, U2), S).\n\n",
  "game_moves": [
    "Disarm",
    "Build"
  ],
  "game_players": [
    "nation1",
    "nation2"
  ],
  "status": "correct",
  "moves": [
    "Disarm",
    "Disarm",
    "Build",
    "Build"
  ],
  "payoffs": [
    6.0,
    1.0,
    4.0,
    7.0
  ],
  "total_payoff": 18.0,
  "default_move": "Disarm",
  "trace_messages": [],
  "attempts": 1
}