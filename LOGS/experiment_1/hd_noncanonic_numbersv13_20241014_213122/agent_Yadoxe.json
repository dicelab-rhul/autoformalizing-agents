{
  "name": "Yadoxe",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "  \n% Discontiguous declarations for the specified predicates\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous outcome/6.\n:- discontiguous goal/2.\n\n% Payoff matrix for the inheritance division game\npayoff('DemandMore', 'DemandMore', -5, -5).\npayoff('FairSplit', 'DemandMore', -3, 3).\npayoff('DemandMore', 'FairSplit', 3, -3).\npayoff('FairSplit', 'FairSplit', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(sibling1), s0).\ninitially(player(sibling2), s0).\ninitially(role(sibling1, row), s0).\ninitially(role(sibling2, col), s0).\ninitially(control(sibling1), s0).\ninitially(control(sibling2), s0).\ninitially(default_move(_, 'FairSplit'), s0).\n\n% A state is final after both siblings have made their choice.\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the sibling has control (i.e., it is their turn).\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a sibling to choose\npossible(move(P, 'DemandMore'), S) :- holds(player(P), S).\npossible(move(P, 'FairSplit'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other.\nopposite_move('FairSplit', 'DemandMore').\nopposite_move('DemandMore', 'FairSplit').\n\n% The effects of a move: if a sibling has chosen M, then in the next state this is what they did.\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the sibling loses control, i.e., cannot move anymore.\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with siblings, Moves, and Utilities.\nfinally(outcome(S1, M1, U1, S2, M2, U2), S) :-\n    final(S),\n    holds(role(S1, row), S),\n    holds(did(S1, M1), S),\n    holds(role(S2, col), S),\n    holds(did(S2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the siblings.\nfinally(goal(S1, U1), S) :-\n    finally(outcome(S1, _, U1, _, _, _), S).\nfinally(goal(S2, U2), S) :-\n    finally(outcome(_, _, _, S2, _, U2), S).\n",
  "game_moves": [
    "DemandMore",
    "FairSplit"
  ],
  "game_players": [
    "sibling1",
    "sibling2"
  ],
  "status": "correct",
  "moves": [
    "FairSplit",
    "FairSplit",
    "DemandMore",
    "DemandMore"
  ],
  "payoffs": [
    0.0,
    -3.0,
    -5.0,
    3.0
  ],
  "total_payoff": -5.0,
  "default_move": "FairSplit",
  "trace_messages": [],
  "attempts": 1
}