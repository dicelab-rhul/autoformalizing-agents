{
  "name": "Detenu",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": " \n% Domain Specific Axioms for the Inheritance Division Game\n\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the inheritance division game\npayoff('Fair', 'Fair', 0, 0).\npayoff('Demand', 'Fair', 3, -3).\npayoff('Fair', 'Demand', -3, 3).\npayoff('Demand', 'Demand', -5, -5).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play\ninitially(player(sibling1), s0).\ninitially(player(sibling2), s0).\ninitially(role(sibling1, decision1), s0).\ninitially(role(sibling2, decision2), s0).\ninitially(control(sibling1), s0).\ninitially(control(sibling2), s0).\ninitially(default_move(_, 'Fair'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state\nfinal(do(move(_S2, _M2), do(move(_S1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn)\nlegal(move(S, M), S0):- possible(move(S, M), S0), holds(control(S), S0).\n\n% What is possible for a player to choose\npossible(move(S, 'Fair'), S0):- holds(player(S), S0).\npossible(move(S, 'Demand'), S0):- holds(player(S), S0).\n\n% Moves that are opposite to each other\nopposite_move('Fair', 'Demand').\nopposite_move('Demand', 'Fair').\n\n% The effects of a move: if Sibling has chosen a Move, then in the next state this\n% is what they did\neffect(did(S, M), move(S, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore\nabnormal(control(S), move(S, _M), _S).\n\n% What holds finally: the outcome with siblings, Moves, and Utilities\nfinally(outcome(S1, M1, U1, S2, M2, U2), S):-\n    final(S),\n    holds(role(S1, decision1), S),\n    holds(did(S1, M1), S),\n    holds(role(S2, decision2), S),\n    holds(did(S2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the siblings\nfinally(goal(S1, U1), S):-\n    finally(outcome(S1, _, U1, _, _, _), S).\nfinally(goal(S2, U2), S):-\n    finally(outcome(_, _, _, S2, _, U2), S).\n",
  "game_moves": [
    "Demand",
    "Fair"
  ],
  "game_players": [
    "sibling1",
    "sibling2"
  ],
  "status": "correct",
  "moves": [
    "Fair",
    "Fair",
    "Demand",
    "Demand"
  ],
  "payoffs": [
    0.0,
    -3.0,
    -5.0,
    3.0
  ],
  "total_payoff": -5.0,
  "default_move": "Fair",
  "trace_messages": [],
  "attempts": 1
}