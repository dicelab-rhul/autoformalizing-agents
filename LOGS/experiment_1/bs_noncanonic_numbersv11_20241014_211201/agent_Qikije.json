{
  "name": "Qikije",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous holds/2.\n:- discontiguous initially/2.\n:- discontiguous payoff/4.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous abnormal/3.\n:- discontiguous effect/3.\n:- discontiguous opposite_move/2.\n:- discontiguous finally/3.\n\n/* Game specific predicates for Generals' Coordination Game */\n\n% Payoff matrix for Generals' Coordination Game\npayoff('North Ridge', 'North Ridge', 2, 1).\npayoff('South Valley', 'South Valley', 1, 2).\npayoff('North Ridge', 'South Valley', 0, 0).\npayoff('South Valley', 'North Ridge', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(gen1), s0).\ninitially(player(gen2), s0).\ninitially(role(gen1, north_advocate), s0).\ninitially(role(gen2, south_advocate), s0).\ninitially(control(gen1), s0).\ninitially(control(gen2), s0).\ninitially(default_move(_, 'North Ridge'), s0).\n\n% When a state is final: no need to check content as it generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_G2, _M2), do(move(_G1, _M1), S))):- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(G, M), S):- possible(move(G, M), S), holds(control(G), S).\n\n% What is possible for a player to choose\npossible(move(G, 'North Ridge'), S):- holds(player(G), S).\npossible(move(G, 'South Valley'), S):- holds(player(G), S).\n\n% Moves that are opposite to each other.\nopposite_move('North Ridge', 'South Valley').\nopposite_move('South Valley', 'North Ridge').\n\n% The effects of a move: if G has chosen M, then in the next state this is what they did.\neffect(did(G, M), move(G, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e., cannot move anymore.\nabnormal(control(G), move(G, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(G1, M1, U1, G2, M2, U2), S):-\n    final(S),\n    holds(role(G1, north_advocate), S),\n    holds(did(G1, M1), S),\n    holds(role(G2, south_advocate), S),\n    holds(did(G2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(G1, U1), S):-\n    finally(outcome(G1, _, U1, _, _, _), S).\n\nfinally(goal(G2, U2), S):-\n    finally(outcome(_, _, _, G2, _, U2), S).\n",
  "game_moves": [
    "North Ridge",
    "South Valley"
  ],
  "game_players": [
    "gen1",
    "gen2"
  ],
  "status": "correct",
  "moves": [
    "North Ridge",
    "North Ridge",
    "South Valley",
    "South Valley"
  ],
  "payoffs": [
    2.0,
    0.0,
    1.0,
    0.0
  ],
  "total_payoff": 3.0,
  "default_move": "North Ridge",
  "trace_messages": [],
  "attempts": 1
}