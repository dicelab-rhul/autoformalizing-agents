{
  "name": "Cuhiya",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for the conference selection game */\n\n% Payoff matrix\npayoff('Tech Conference', 'Tech Conference', 2, 1).\npayoff('Marketing Summit', 'Marketing Summit', 1, 2).\npayoff('Tech Conference', 'Marketing Summit', 0, 0).\npayoff('Marketing Summit', 'Tech Conference', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play.\ninitially(player(colleague1), s0).\ninitially(player(colleague2), s0).\ninitially(role(colleague1, tech_enthusiast), s0).\ninitially(role(colleague2, marketing_specialist), s0).\ninitially(control(colleague1), s0).\ninitially(control(colleague2), s0).\ninitially(default_move(_, 'Tech Conference'), s0).\n\n% When a state is final: no need to check content as it is generated by game/2,\n% implying it is a legal state.\nfinal(do(move(_C2, _M2), do(move(_C1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control (is its turn).\nlegal(move(C, M), S):- possible(move(C, M), S), holds(control(C), S).\n\n% What is possible for a player to choose\npossible(move(C, 'Tech Conference'), S):- holds(player(C), S).\npossible(move(C, 'Marketing Summit'), S):- holds(player(C), S).\n\n% Moves that are opposite to each other.\nopposite_move('Tech Conference', 'Marketing Summit').\nopposite_move('Marketing Summit', 'Tech Conference').\n\n% The effects of a move: if C has chosen M, then in the next state this\n% is what they did.\neffect(did(C, M), move(C, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e.,\n% cannot move anymore.\nabnormal(control(C), move(C, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities.\nfinally(outcome(C1, M1, U1, C2, M2, U2), S):-\n    final(S),\n    holds(role(C1, tech_enthusiast), S),\n    holds(did(C1, M1), S),\n    holds(role(C2, marketing_specialist), S),\n    holds(did(C2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players.\nfinally(goal(C1, U1), S):-\n    finally(outcome(C1, _, U1, _, _, _), S).\nfinally(goal(C2, U2), S):-\n    finally(outcome(_, _, _, C2, _, U2), S).\n\n",
  "game_moves": [
    "Marketing Summit",
    "Tech Conference"
  ],
  "game_players": [
    "colleague1",
    "colleague2"
  ],
  "status": "correct",
  "moves": [
    "Tech Conference",
    "Tech Conference",
    "Marketing Summit",
    "Marketing Summit"
  ],
  "payoffs": [
    2.0,
    0.0,
    1.0,
    0.0
  ],
  "total_payoff": 3.0,
  "default_move": "Tech Conference",
  "trace_messages": [],
  "attempts": 1
}