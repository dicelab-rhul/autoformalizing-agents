{
  "name": "Duhuro",
  "strategy_name": "tit-for-tat",
  "strategy": "select(P, O, S, M):-\n    \\+ holds(last_move(O, _LMo), S),\n    holds(default_move(P, M), S).\nselect(_P, O, S, Mo):-\n    holds(last_move(O, Mo), S).",
  "game_rules": "\n% Discontiguous predicate declarations\n:- discontiguous payoff/4.\n:- discontiguous initially/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for the conference choice game\npayoff('Tech', 'Tech', 2, 1).\npayoff('Marketing', 'Marketing', 1, 2).\npayoff('Tech', 'Marketing', 0, 0).\npayoff('Marketing', 'Tech', 0, 0).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play\ninitially(player(p1), s0).\ninitially(player(p2), s0).\ninitially(role(p1, tech_enthusiast), s0).\ninitially(role(p2, marketing_specialist), s0).\ninitially(control(p1), s0).\ninitially(control(p2), s0).\ninitially(default_move(_, 'Tech'), s0).\n\n% When a state is final\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))):-initial(S).\n\n% A legal move is a possible move where the player has control\nlegal(move(P, M), S):- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'Tech'), S):- holds(player(P), S).\npossible(move(P, 'Marketing'), S):- holds(player(P), S).\n\n% Moves that are opposite to each other\nopposite_move('Tech', 'Marketing').\nopposite_move('Marketing', 'Tech').\n\n% The effects of a move\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, moves, and utilities\nfinally(outcome(P1, M1, U1, P2, M2, U2), S):-\n    final(S),\n    holds(role(P1, tech_enthusiast), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, marketing_specialist), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players\nfinally(goal(P1, U1), S):-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S):-\n    finally(outcome(_, _, _, P2, _, U2), S).\n",
  "game_moves": [
    "Marketing",
    "Tech"
  ],
  "game_players": [
    "p1",
    "p2"
  ],
  "status": "correct",
  "moves": [
    "Tech",
    "Tech",
    "Marketing",
    "Marketing"
  ],
  "payoffs": [
    2.0,
    0.0,
    1.0,
    0.0
  ],
  "total_payoff": 3.0,
  "default_move": "Tech",
  "trace_messages": [],
  "attempts": 1
}