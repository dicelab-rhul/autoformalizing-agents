{
  "name": "Ciqipo",
  "strategy_name": "default_move",
  "strategy": "select(P, _, S, M):-\n    holds(default_move(P, M), S).",
  "game_rules": "\n\n:- discontiguous payoff/4.\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n% Payoff matrix for Stag Hunt\npayoff('S', 'S', 3, 3).\npayoff('S', 'H', 0, 2).\npayoff('H', 'S', 2, 0).\npayoff('H', 'H', 1, 1).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play\ninitially(player(h1), s0).\ninitially(player(h2), s0).\ninitially(role(h1, row), s0).\ninitially(role(h2, col), s0).\ninitially(control(h1), s0).\ninitially(control(h2), s0).\ninitially(default_move(_, 'S'), s0).\n\n% When a state is final\nfinal(do(move(_H2, _M2), do(move(_H1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn)\nlegal(move(H, M), S) :- possible(move(H, M), S), holds(control(H), S).\n\n% What is possible for a player to choose\npossible(move(H, 'S'), S) :- holds(player(H), S).\npossible(move(H, 'H'), S) :- holds(player(H), S).\n\n% Moves that are opposite to each other\nopposite_move('S', 'H').\nopposite_move('H', 'S').\n\n% The effects of a move\neffect(did(H, M), move(H, M), _S).\n\n% The effects of a move: once a move is made, the player loses control\nabnormal(control(H), move(H, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities\nfinally(outcome(H1, M1, U1, H2, M2, U2), S) :-\n    final(S),\n    holds(role(H1, row), S),\n    holds(did(H1, M1), S),\n    holds(role(H2, col), S),\n    holds(did(H2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players\nfinally(goal(H1, U1), S) :-\n    finally(outcome(H1, _, U1, _, _, _), S).\n\nfinally(goal(H2, U2), S) :-\n    finally(outcome(_, _, _, H2, _, U2), S).\n\n% Mark the end of the Prolog code\n",
  "game_moves": [
    "S",
    "H"
  ],
  "game_players": [
    "h1",
    "h2"
  ],
  "status": "correct",
  "moves": [
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S",
    "S"
  ],
  "payoffs": [
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    0.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    0.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    0.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0,
    3.0
  ],
  "total_payoff": 147.0,
  "default_move": "S",
  "trace_messages": [],
  "attempts": 0
}