{
  "name": "Sofefa",
  "strategy_name": "random",
  "strategy": "select(_P, _O, Ms, M):-\n\trandom(0, 1.0, RN),                                  % Generate random number\n\tround_to_decimal_places(RN, 3, floor, RRN),          % Round it down.\n\tlength(Ms, L),                                       % Find length of list\n\tThresh is  1 / L,    \t\t\t             % Find threashold\n\tround_to_decimal_places(Thresh, 3, floor, RThresh),  % Round it\n\tonce((\n\t\tidxmember(I, Ms, M),\n\t\tUL is I*RThresh,\n\t\tround_to_decimal_places(UL, 3, floor, RUL),  % Check it succeeds\n\t\tRRN < RUL\n\t)).\n\nidxmember(I, L, El):-\n\tnth0(Ii, L, El),\n\tI is Ii + 1.\n\n% Library for random strategy.\n\n/* Need a generic rounding predicate.\n\n- Number is the real number you want to round.\n- DecimalPlaces is the number of decimal places you want to round to.\n- RoundingFunction can be 'ceil' or 'floor'.\n\nLike rounding up in XL - here we use ceil(ing) as the name of the fn to call.\n?- round_to_decimal_places(2.345, 2, ceil, Result).\nResult = 2.35.\n\nLike rounding down in XL - here we use floor as the name of the fn to call.\n?- round_to_decimal_places(2.345, 2, floor, Result).\nResult = 2.34.\n\n*/\n\nround_to_decimal_places(Number, DecimalPlaces, RoundingFunction, RoundedNumber) :-\n    Multiplier is 10^DecimalPlaces,            % Multiplier for the specified decimal places\n    call(RoundingFunction, Number * Multiplier, Temp), % Apply the rounding function (ceil or floor)\n    RoundedNumber is Temp / Multiplier.        % Divide to get the result",
  "game_rules": "\n:- discontiguous initial/1.\n:- discontiguous initially/2.\n:- discontiguous final/1.\n:- discontiguous legal/2.\n:- discontiguous possible/2.\n:- discontiguous effect/3.\n:- discontiguous abnormal/3.\n:- discontiguous finally/2.\n\n/* Game specific predicates for the Competitive Pricing Game */\n\n% Payoff matrix for the Competitive Pricing Game\npayoff('Cut', 'Cut', 4, 4).\npayoff('Cut', 'NoCut', 9, 1).\npayoff('NoCut', 'Cut', 1, 9).\npayoff('NoCut', 'NoCut', 6, 6).\n\n% Initial state\ninitial(s0).\n\n% What holds initially: who is a player, their role, and whether they can play\ninitially(player(comp1), s0).\ninitially(player(comp2), s0).\ninitially(role(comp1, row), s0).\ninitially(role(comp2, col), s0).\ninitially(control(comp1), s0).\ninitially(control(comp2), s0).\ninitially(default_move(_, 'NoCut'), s0).\n\n% When a state is final: no need to check content as it generated by game/2\nfinal(do(move(_P2, _M2), do(move(_P1, _M1), S))) :- initial(S).\n\n% A legal move is a possible move where the player has control (is its turn)\nlegal(move(P, M), S) :- possible(move(P, M), S), holds(control(P), S).\n\n% What is possible for a player to choose\npossible(move(P, 'Cut'), S) :- holds(player(P), S).\npossible(move(P, 'NoCut'), S) :- holds(player(P), S).\n\n% Moves that are opposite to each other\nopposite_move('Cut', 'NoCut').\nopposite_move('NoCut', 'Cut').\n\n% The effects of a move: if P has chosen M, then in the next state this is what they did\neffect(did(P, M), move(P, M), _S).\n\n% The effects of a move: once a move is made, the player loses control, i.e., cannot move anymore\nabnormal(control(P), move(P, _M), _S).\n\n% What holds finally: the outcome with players, Moves, and Utilities\nfinally(outcome(P1, M1, U1, P2, M2, U2), S) :-\n    final(S),\n    holds(role(P1, row), S),\n    holds(did(P1, M1), S),\n    holds(role(P2, col), S),\n    holds(did(P2, M2), S),\n    payoff(M1, M2, U1, U2).\n\n% Goals achieved by the players\nfinally(goal(P1, U1), S) :-\n    finally(outcome(P1, _, U1, _, _, _), S).\nfinally(goal(P2, U2), S) :-\n    finally(outcome(_, _, _, P2, _, U2), S).\n",
  "game_moves": [
    "Cut",
    "NoCut"
  ],
  "game_players": [
    "comp1",
    "comp2"
  ],
  "status": "correct",
  "moves": [
    "Cut",
    "NoCut",
    "Cut",
    "NoCut",
    "NoCut",
    "Cut",
    "NoCut",
    "Cut",
    "NoCut",
    "NoCut",
    "Cut",
    "NoCut",
    "NoCut",
    "Cut",
    "Cut",
    "NoCut",
    "NoCut",
    "Cut",
    "NoCut",
    "Cut",
    "NoCut",
    "Cut",
    "Cut",
    "NoCut",
    "Cut",
    "Cut",
    "NoCut",
    "NoCut",
    "Cut",
    "NoCut",
    "NoCut",
    "NoCut",
    "NoCut",
    "NoCut",
    "NoCut",
    "Cut",
    "NoCut",
    "NoCut",
    "NoCut",
    "NoCut",
    "Cut",
    "NoCut",
    "NoCut",
    "Cut",
    "NoCut",
    "Cut",
    "Cut",
    "Cut",
    "NoCut",
    "NoCut",
    "Cut",
    "Cut",
    "NoCut",
    "Cut",
    "NoCut",
    "NoCut",
    "NoCut",
    "NoCut",
    "NoCut",
    "Cut",
    "Cut",
    "Cut",
    "NoCut",
    "Cut",
    "Cut",
    "NoCut",
    "Cut",
    "NoCut",
    "Cut",
    "NoCut"
  ],
  "payoffs": [
    4.0,
    1.0,
    4.0,
    1.0,
    1.0,
    4.0,
    1.0,
    4.0,
    1.0,
    1.0,
    9.0,
    6.0,
    1.0,
    4.0,
    9.0,
    6.0,
    1.0,
    4.0,
    6.0,
    4.0,
    6.0,
    4.0,
    4.0,
    1.0,
    4.0,
    4.0,
    1.0,
    1.0,
    4.0,
    1.0,
    6.0,
    6.0,
    6.0,
    6.0,
    6.0,
    9.0,
    6.0,
    6.0,
    6.0,
    6.0,
    6.0,
    1.0,
    4.0,
    9.0,
    4.0,
    9.0,
    4.0,
    4.0,
    6.0,
    6.0,
    4.0,
    4.0,
    4.0,
    9.0,
    6.0,
    6.0,
    6.0,
    6.0,
    4.0,
    9.0,
    9.0,
    4.0,
    1.0,
    9.0,
    4.0,
    1.0,
    9.0,
    1.0,
    9.0,
    1.0
  ],
  "total_payoff": 324.0,
  "default_move": "NoCut",
  "trace_messages": [],
  "attempts": 0
}