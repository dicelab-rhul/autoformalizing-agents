from abc import ABC, abstractmethod
from typing import List


class BaseLLM(ABC):
	"""
	Abstract base class for managing interactions with language models.

	This class provides an interface for language models with methods to prompt,
	manage context, and handle conversation history.
	"""

	def __init__(self) -> None:
		"""
		Initialize the Language Model Manager.
		"""
		self.messages: List[str] = []

	@property
	@abstractmethod
	def save_history(self) -> bool:
		"""
		Whether to save the conversation history.

		Returns:
			bool: True if history is to be saved, False otherwise.
		"""
		pass

	@property
	@abstractmethod
	def context(self) -> List[str]:
		"""
		Get the current conversation context.

		Returns:
			List[str]: The list of messages in the current conversation context.
		"""
		pass

	@abstractmethod
	def prompt(self, instruction: str, max_tokens: int = 1024) -> str:
		"""
		Prompt the language model with an instruction and return its response.

		Args:
			instruction (str): The instruction to prompt the language model with.
			max_tokens (int): Maximum number of tokens to generate in the response.

		Returns:
			str: The response generated by the language model.
		"""
		pass

	@abstractmethod
	def clear_context(self) -> None:
		"""
		Clear the context of the current conversation.
		"""
		pass

	@abstractmethod
	def add_response(self, response: str) -> None:
		"""
		Add a response to the conversation history.

		Args:
			response (str): The response to be added to the history.
		"""
		pass

	@abstractmethod
	def get_name(self) -> str:
		"""
		Get the name of the language model.

		Returns:
			str: The name of the language model.
		"""
		pass
